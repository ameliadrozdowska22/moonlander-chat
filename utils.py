import os
import orq_ai_sdk
from orq_ai_sdk import Orq
import json
import streamlit as st
import re
import requests


def generate_response(api_token, key_input, conv_memory, context):
    """
    This function invokes the deployment and extracts the text from the response.
    
    Param:
        - api_token: str;
        - key_input: str;
        - conv_memory: List[Dict[str, Any]] - List with past messages, where each message is a dictionary containing a role, and the content.
        - context_input: Dict[str, List[str]] - where the key is a context key given by the user and the value is a list of corresponding context values given by the user;

    Return:
        - response: str - text generated by the model;
    """

    client = Orq(
        api_key=api_token
    )

    generation = client.deployments.invoke(
        key=key_input,
        messages= conv_memory,
        invoke_options={"include_retrievals": True},
        context=context
    )

    # extracting the text from the generation
    response = generation.choices[0].message.content

    trace_id = generation.id
    
    return response, trace_id


def set_feedback(feedback, api_token, trace_id):
    try:
        payload = {
            "property": "rating",
            "value": feedback,
            "trace_id": trace_id
        }
        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            'authorization': f'Bearer {api_token}'
        }

        response = requests.post("https://api.orq.ai/v2/feedback", json=payload, headers=headers)

    except Exception as e:
        print(e)

    return


def post_correction(user_correction, api_token, trace_id):
    try:
        payload = {
            "property": "correction",
            "value": user_correction,
            "trace_id": trace_id
        }
        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            'authorization': f'Bearer {api_token}'
        }

        response = requests.post("https://api.orq.ai/v2/feedback", json=payload, headers=headers)

    except Exception as e:
        print(e)

    return


def get_deployments(api_token):
    """
    This function takes an API token and returns a list with up to 50 deployment keys of a user with this token

    Param:
        - api_token: str

    Return: 
        - depl_key_list: List[str]
    """
    headers = {
        'Authorization': f'Bearer {api_token}'
    }

    params = {
        "limit": 50
    }

    response = requests.get('https://my.orq.ai/v2/deployments', headers=headers, params=params)

    result = response.json()
    json.dumps(result, indent=4)

    depl_key_list = []

    for deployment in result["data"]:
        deployment_name = deployment["key"]
        depl_key_list.append(deployment_name)

    return depl_key_list